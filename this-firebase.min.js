// ThisFirebase version 1.0.0 (http://thisjs.com/#plugins&firebase) | License (http://thisjs.com/#license) | (c) 2016 Ezra Obiwale
ThisApp.extend({FB: function () {
        var _this = this;
        return{onAdded: function (location, successCallback) {
                var _this = this;
                return this.ref(location).on('child_added', function (resp) {
                    _this.call(successCallback, resp);
                });
            }, onChanged: function (location, successCallback) {
                var _this = this;
                return this.ref(location).on('child_changed', function (resp) {
                    _this.call(successCallback, resp);
                });
            }, onRemoved: function (location, successCallback) {
                var _this = this;
                return this.ref(location).on('child_removed', function (resp) {
                    _this.call(successCallback, resp);
                });
            }, watch: function (location, addedCallback, changedCallback, removedCallback) {
                if (addedCallback)
                    this.onAdded(location, addedCallback);
                if (changedCallback)
                    this.onChanged(location, changedCallback);
                if (removedCallback)
                    this.onRemoved(location, removedCallback);
                return this;
            }, unwatch: function (location) {
                return this.ref(location).off();
            }, create: function (location, data) {
                if (!location || !data)
                    return false;
                var ref = this.ref(location).push(), uid = ref.key;
                if (_this.fbConfig.uid)
                    data[_this.fbConfig.uid] = uid;
                ref.set(data);
                return uid;
            }, read: function (location, successCallback) {
                if (!location)
                    return false;
                var _this = this;
                return this.ref(location).once('value').then(function (resp) {
                    _this.call(successCallback, resp);
                });
            }, update: function (location, data) {
                if (!location || !data)
                    return false;
                return this.ref(location).update(data);
            }, delete: function (location) {
                if (!location)
                    return false;
                return this.ref(location).remove();
            }, ref: function (location) {
                return firebase.database().ref(location);
            }, call: function (callback, snapshot) {
                try {
                    _this.__.callable(callback).call(this, snapshot.val(), snapshot.key);
                }
                catch (e) {
                    console.error(e.message);
                }
                return this;
            }};
    }, firebase: function (fbConfig) {
        if (this.running)
            throw'Method firebase() must be called before method start()';
        this.fbConfig = this.__.extend({auth: false, uid: 'id'}, fbConfig);
        firebase.initializeApp(fbConfig);
        var _this = this;
        this.fbSuccess = {create: {}, update: {}, delete: {}};
        this.fbError = {create: {}, update: {}, delete: {}};
        this.watch(function (location, success, error) {
            _this.FB().watch(location, function (data, id) {
                if (_this.fbConfig.uid)
                    data[_this.fbConfig.uid] = id;
                _this.__.callable(_this.fbSuccess.create[location] || success).call(null, data, _this.fbConfig.uid, 'created');
                delete _this.fbSuccess.create[location];
                delete _this.fbError.create[location];
            }, function (data, id) {
                if (_this.fbConfig.uid)
                    data[_this.fbConfig.uid] = id;
                _this.__.callable(_this.fbSuccess.update[location] || success).call(null, data, _this.fbConfig.uid, 'updated');
                delete _this.fbSuccess.update[location];
                delete _this.fbError.update[location];
            }, function (data, id) {
                if (_this.fbConfig.uid)
                    data[_this.fbConfig.uid] = id;
                _this.__.callable(_this.fbSuccess.delete[location] || success).call(null, data, _this.fbConfig.uid, 'deleted');
                delete _this.fbSuccess.delete[location];
                delete _this.fbError.delete[location];
            });
        });
        this.setDataTransport(function (config) {
            if (config.action !== 'read') {
                _this.fbSuccess[config.action][config.url] = config.success;
                _this.fbError[config.action][config.url] = config.error;
            }
            switch (config.action) {
                case'create':
                    return _this.FB().create(config.url, config.data);
                case'read':
                    _this.FB().read(config.url, function (data, id) {
                        if (_this.fbConfig.uid && !config.collection)
                            data[_this.fbConfig.uid] = id;
                        this.__.callable(config.success).call(this, data, _this.fbConfig.uid);
                    }.bind(this), config.error);
                    break;
                case'update':
                    _this.FB().update(config.url, config.data);
                    break;
                case'delete':
                    _this.FB().delete(config.url);
                    break;
                case'search':
                    break;
            }
            return true;
        });
        return this.cacheData(false).setDataKey(null);
    }});